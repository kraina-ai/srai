[project]
name = "srai"
version = "0.6.1"
description = "A set of python modules for geospatial machine learning and data mining"
authors = [
    { name = "Piotr Gramacki", email = "pgramacki@kraina.ai" },
    { name = "Kacper Leśniara", email = "klesniara@kraina.ai" },
    { name = "Kamil Raczycki", email = "kraczycki@kraina.ai" },
    { name = "Szymon Woźniak", email = "swozniak@kraina.ai" },
]
# pdm add <library>
dependencies = [
    "pandas",
    "geopandas",
    "shapely",
    "h3>=4.0.0b1",
    "numpy",
    "geoparquet",
    "pyfunctional",
    "rtree",
    "pyarrow",
    "topojson",
    "tqdm",
    "s2",
    "typeguard",
    "requests",
    "h3ronpy>=0.18.0",
]
requires-python = ">=3.9"
readme = "README.md"
license = { text = "Apache-2.0" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: Apache Software License",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: GIS",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
]

[project.urls]
Homepage = "https://kraina-ai.github.io/srai"
Repository = "https://github.com/kraina-ai/srai"
Documentation = "https://kraina-ai.github.io/srai"
Changelog = "https://github.com/kraina-ai/srai/blob/main/CHANGELOG.md"

[project.optional-dependencies]
# Make sure to edit test_optional_dependencies.py:
# add entries to optional packages
# add tests

# pdm add -G osm <library>
osm = [
    "osmium",
    "osmnx",
    "overpass",
    "pillow",
    "beautifulsoup4",
]
# pdm add -G voronoi <library>
voronoi = ["pymap3d", "haversine", "scipy", "spherical-geometry"]
# pdm add -G gtfs <library>
gtfs = ["gtfs-kit"]
# pdm add -G plotting <library>
plotting = [
    "folium",
    "mapclassify",
    "matplotlib",
    "plotly",
    "kaleido<=0.2.1",
] # kaleido<=0.2.1 because installation breaks on 0.2.1.post1
# pdm add -G torch <library>
torch = ["pytorch-lightning", "torch"]
all = ["srai[osm,voronoi,gtfs,plotting,torch]"]


[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool]
[tool.pdm]
[tool.pdm.dev-dependencies]
# pdm add -d <library>
dev = ["bumpver", "types-requests"]
# pdm add -dG lint <library>
lint = ["pre-commit", "black[jupyter]", "mypy", "docformatter[tomli]", "ruff"]
# pdm add -dG test <library>
test = [
    "pytest",
    "tox-pdm",
    "pytest-mock",
    "requests-mock",
    "pytest-check",
    "pytest-parametrization",
    "pytest-xdist",
]
# pdm add -dG visualization <library>
visualization = ["keplergl", "matplotlib"]
# pdm add -dG docs <library>
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocs-mermaid2-plugin",
    "mkdocstrings[python]",
    "mkdocs-jupyter",
    "ipykernel",
    "mkdocs-gen-files",
    "mkdocs-awesome-pages-plugin",
    "mike",
    "scikit-learn",
    "umap-learn",
]
performance = ["scalene"]
license = ["licensecheck"]

[tool.pdm.scripts]
post_install = "pre-commit install"

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311"]
preview = true

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",
    "W",   # pycodestyle
    "F",   # pyflakes
    "UP",  # pyupgrade
    "D",   # pydocstyle
    "I",   # isort
    "B",   # flake8-bugbear
    "NPY", # NumPy
    "YTT", # flake8-2020
    "Q",   # flake8-quotes
    "PLE",
    "PLW", # pylint (add "PLR" in the future)
    "PIE", # misc lints
    "TID", # tidy imports
    "ISC", # implicit string concatenation
    "TCH", # type-checking imports
    # "N",            # pep8-naming
    # "ANN",          # flake8-annotations
]
ignore = ["D212"]
extend-exclude = ["old"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pycodestyle]
max-doc-length = 100

[tool.mypy]
strict = true
show_column_numbers = true
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true

[tool.docformatter]
syntax = 'google'
black = true
recursive = true
wrap-summaries = 100
wrap-descriptions = 100
# force-wrap = false # uncomment after https://github.com/PyCQA/docformatter/issues/68 is resolved
tab-width = 4
blank = false
pre-summary-newline = true
close-quotes-on-newline = true
wrap-one-line = true

[tool.bumpver]
current_version = "0.6.1"
version_pattern = "MAJOR.MINOR.PATCH[PYTAGNUM]"
commit_message = "chore(CI/CD): bump version {old_version} -> {new_version}"
commit = true
tag = false
push = false

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    '^current_version = "{version}"$',
    '^version = "{version}"$',
]
"srai/__init__.py" = ['^__version__ = "{version}"$']
"CITATION.cff" = ['^version: {version}$']

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib"]
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]
log_cli = true

[tool.licensecheck]
using = "requirements"
zero = false
ignore_licenses = ["UNKNOWN"]
ignore_packages = [
    'srai',                     # skip self
    'scalene',                  # uses Apache-2.0 license, takes time to analyse
    'docformatter',             # uses MIT license, has mismatched license in analysis
    'pymap3d',                  # uses BSD-2 license, has mismatched license in analysis
    'mkdocs-jupyter',           # uses Apache-2.0 license, has mismatched license in analysis
    'nvidia-cublas-cu11',       # uses NVIDIA license
    'nvidia-cuda-cupti-cu11',   # uses NVIDIA license
    'nvidia-cuda-nvrtc-cu11',   # uses NVIDIA license
    'nvidia-cuda-runtime-cu11', # uses NVIDIA license
    'nvidia-cudnn-cu11',        # uses NVIDIA license
    'nvidia-cufft-cu11',        # uses NVIDIA license
    'nvidia-curand-cu11',       # uses NVIDIA license
    'nvidia-cusolver-cu11',     # uses NVIDIA license
    'nvidia-cusparse-cu11',     # uses NVIDIA license
    'nvidia-nccl-cu11',         # uses NVIDIA license
    'nvidia-nvtx-cu11',         # uses NVIDIA license
]
